version: '3.8'

services:
  # Production Database with High Availability
  postgres-primary:
    image: postgres:15
    environment:
      POSTGRES_DB: federated_pipeline
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD_FILE: /run/secrets/postgres_replication_password
    volumes:
      - postgres_primary_data:/var/lib/postgresql/data
      - ./scripts/postgres-primary-init.sh:/docker-entrypoint-initdb.d/init.sh
    ports:
      - "5432:5432"
    secrets:
      - postgres_password
      - postgres_replication_password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G

  # Redis Cluster for Production
  redis-master:
    image: redis:7-alpine
    command: redis-server --appendonly yes --replica-read-only no
    volumes:
      - redis_master_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  redis-replica:
    image: redis:7-alpine
    command: redis-server --appendonly yes --replicaof redis-master 6379
    volumes:
      - redis_replica_data:/data
    depends_on:
      - redis-master
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M

  # Production Aggregation Server with Load Balancing
  aggregation-server:
    image: registry.company.com/federated-pipeline/aggregation-server:latest
    environment:
      - ENVIRONMENT=production
      - DB_HOST=postgres-primary
      - DB_PASSWORD_FILE=/run/secrets/postgres_password
      - REDIS_HOST=redis-master
      - JWT_SECRET_FILE=/run/secrets/jwt_secret
      - MODEL_ENCRYPTION_KEY_FILE=/run/secrets/model_encryption_key
    depends_on:
      postgres-primary:
        condition: service_healthy
      redis-master:
        condition: service_healthy
    volumes:
      - model_storage:/app/models
      - ./config:/app/config:ro
    secrets:
      - postgres_password
      - jwt_secret
      - model_encryption_key
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        monitor: 60s
        order: start-first

  # Production Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - aggregation-server
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Edge Coordinators (deployed as needed)
  edge-coordinator:
    image: registry.company.com/federated-pipeline/edge-coordinator:latest
    environment:
      - ENVIRONMENT=production
      - AGGREGATION_SERVER_URL=http://nginx:80
      - REGION=${EDGE_REGION:-us-west-1}
      - NODE_ID=${NODE_ID}
    depends_on:
      - aggregation-server
    volumes:
      - edge_data:/app/data
      - ./config:/app/config:ro
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus-prod.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/federated_learning_rules.yml:/etc/prometheus/rules.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=90d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD_FILE=/run/secrets/grafana_admin_password
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    secrets:
      - grafana_admin_password
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Log Aggregation
  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  promtail:
    image: grafana/promtail:latest
    volumes:
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    deploy:
      mode: global
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  # Backup Service
  backup:
    image: registry.company.com/federated-pipeline/backup:latest
    environment:
      - BACKUP_SCHEDULE=0 2 * * *  # Daily at 2 AM
      - DB_HOST=postgres-primary
      - DB_PASSWORD_FILE=/run/secrets/postgres_password
      - S3_BUCKET=${BACKUP_S3_BUCKET}
      - AWS_ACCESS_KEY_ID_FILE=/run/secrets/aws_access_key_id
      - AWS_SECRET_ACCESS_KEY_FILE=/run/secrets/aws_secret_access_key
    volumes:
      - model_storage:/app/models:ro
      - backup_temp:/tmp/backup
    secrets:
      - postgres_password
      - aws_access_key_id
      - aws_secret_access_key
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.1'
          memory: 256M

volumes:
  postgres_primary_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/postgres
  redis_master_data:
    driver: local
  redis_replica_data:
    driver: local
  model_storage:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/models
  edge_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  backup_temp:
    driver: local

secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
  postgres_replication_password:
    file: ./secrets/postgres_replication_password.txt
  jwt_secret:
    file: ./secrets/jwt_secret.txt
  model_encryption_key:
    file: ./secrets/model_encryption_key.txt
  grafana_admin_password:
    file: ./secrets/grafana_admin_password.txt
  aws_access_key_id:
    file: ./secrets/aws_access_key_id.txt
  aws_secret_access_key:
    file: ./secrets/aws_secret_access_key.txt

networks:
  default:
    driver: overlay
    attachable: true